syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.vrg.rapid.pb";
option java_outer_classname = "Remoting";

package remoting;

service MembershipService {
  rpc sendRequest (RapidRequest) returns (RapidResponse) {}
  rpc receivePreJoinMessage (PreJoinMessage) returns (JoinResponse) {}
  rpc receiveJoinPhase2Message (JoinMessage) returns (JoinResponse) {}
  rpc receiveLinkUpdateMessage (BatchedLinkUpdateMessage) returns (Response) {}
  rpc receiveConsensusProposal (ConsensusProposal) returns (ConsensusResponse) {}
  rpc receiveProbe (ProbeMessage) returns (ProbeResponse) {}

  rpc receivePrepare (Prepare) returns (ConsensusResponse) {}  // at acceptor
  rpc receivePrepareResponse (PrepareResponse) returns (ConsensusResponse) {}  // at coordinator
  rpc receiveAccept (Accept) returns (ConsensusResponse) {}  // at acceptor
  rpc receiveAcceptResponse (AcceptResponse) returns (ConsensusResponse) {}  // at coordinator
}

// All-in-one message type
message RapidRequest
{
   oneof content {
        PreJoinMessage preJoinMessage = 1;
        JoinMessage joinMessage = 2;
        BatchedLinkUpdateMessage batchedLinkUpdateMessage = 3;
        ConsensusProposal consensusProposal = 4;
        ProbeMessage probeMessage = 5;
   }
}

message RapidResponse
{
   oneof content {
        JoinResponse joinResponse = 1;
        Response response = 2;
        ConsensusResponse consensusResponse = 3;
        ProbeResponse probeResponse = 4;
   }
}


// ******* Join protocol messages *******

message NodeId
{
   int64 high = 1;
   int64 low = 2;
}

// TODO: JoinMessage and JoinResponse are overloaded because they are being used for phase 1 and 2 of the bootstrap.
message PreJoinMessage
{
   string sender = 1;
   NodeId nodeId = 2;
   repeated int32 ringNumber = 3;
   int64 configurationId = 4;
}

message JoinMessage
{
   string sender = 1;
   NodeId nodeId = 2;
   repeated int32 ringNumber = 3;
   int64 configurationId = 4;
   Metadata metadata = 5;
}

message JoinResponse
{
   string sender = 1;
   JoinStatusCode statusCode = 2;
   int64 configurationId = 3;
   repeated string hosts = 4;
   repeated NodeId identifiers = 5;
   map<string, Metadata> clusterMetadata = 6;
}

enum JoinStatusCode {
    HOSTNAME_ALREADY_IN_RING = 0;
    UUID_ALREADY_IN_RING = 1;
    SAFE_TO_JOIN = 2;
    CONFIG_CHANGED = 3;
    MEMBERSHIP_REJECTED = 4;
};

// ******* LinkUpdate messages *******

message BatchedLinkUpdateMessage
{
    string sender = 1;
    repeated LinkUpdateMessage messages = 3;
}

message LinkUpdateMessage
{
    string linkSrc = 1;
    string linkDst = 2;
    LinkStatus linkStatus = 3;
    int64 configurationId = 4;
    repeated int32 ringNumber = 5;
    NodeId nodeId = 6;                      // Required only for join protocol
    Metadata metadata = 7;                // Required only for join protocol
}

enum LinkStatus {
    UP = 0;
    DOWN = 1;
};

message Response
{
}


// ******* Fast Paxos Phase 2 messages *******

message ConsensusProposal
{
    string sender = 1;
    int64 configurationId = 2;
    repeated string hosts = 3;
}

message Rank
{
    int32 round = 1;
    int32 nodeIndex = 2;
}

message Prepare
{
    string sender = 1;
    int64 configurationId = 2;
    Rank rank = 3;
}

message PrepareResponse
{
    string sender = 1;
    int64 configurationId = 2;
    Rank rnd = 3;
    Rank vrnd = 4;
    repeated string vval = 5;
}

message Accept
{
    string sender = 1;
    int64 configurationId = 2;
    repeated string vval = 5;
}

message AcceptResponse
{
    string sender = 1;
    int64 configurationId = 2;
    repeated string hosts = 3;
}

message ConsensusResponse
{
}


// ******* Node Metadata *********
message Metadata
{
    map<string, bytes> metadata = 1;
}


// ******* Used by simple probing failure detector *******

message ProbeMessage
{
    string sender = 1;
    repeated bytes payload = 3;
}

message ProbeResponse
{
    NodeStatus status = 1;
}

enum NodeStatus {
    OK = 0;             // this is the default value
    BOOTSTRAPPING = 1;
};
