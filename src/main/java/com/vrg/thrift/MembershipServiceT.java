/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vrg.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.Option;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"all"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-07")
public class MembershipServiceT {

  public interface Iface {

    public void receiveLinkUpdateMessage(String src, String dst, Status status, long config) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void receiveLinkUpdateMessage(String src, String dst, Status status, long config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void receiveLinkUpdateMessage(String src, String dst, Status status, long config) throws org.apache.thrift.TException
    {
      sendReceiveLinkUpdateMessage(src, dst, status, config);
      recvReceiveLinkUpdateMessage();
    }

    public void sendReceiveLinkUpdateMessage(String src, String dst, Status status, long config) throws org.apache.thrift.TException
    {
      receiveLinkUpdateMessage_args args = new receiveLinkUpdateMessage_args();
      args.setSrc(src);
      args.setDst(dst);
      args.setStatus(status);
      args.setConfig(config);
      sendBase("receiveLinkUpdateMessage", args);
    }

    public void recvReceiveLinkUpdateMessage() throws org.apache.thrift.TException
    {
      receiveLinkUpdateMessage_result result = new receiveLinkUpdateMessage_result();
      receiveBase(result, "receiveLinkUpdateMessage");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void receiveLinkUpdateMessage(String src, String dst, Status status, long config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveLinkUpdateMessage_call method_call = new receiveLinkUpdateMessage_call(src, dst, status, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveLinkUpdateMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String src;
      private String dst;
      private Status status;
      private long config;
      public receiveLinkUpdateMessage_call(String src, String dst, Status status, long config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.dst = dst;
        this.status = status;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveLinkUpdateMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveLinkUpdateMessage_args args = new receiveLinkUpdateMessage_args();
        args.setSrc(src);
        args.setDst(dst);
        args.setStatus(status);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recvReceiveLinkUpdateMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("receiveLinkUpdateMessage", new receiveLinkUpdateMessage());
      return processMap;
    }

    public static class receiveLinkUpdateMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveLinkUpdateMessage_args> {
      public receiveLinkUpdateMessage() {
        super("receiveLinkUpdateMessage");
      }

      public receiveLinkUpdateMessage_args getEmptyArgsInstance() {
        return new receiveLinkUpdateMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiveLinkUpdateMessage_result getResult(I iface, receiveLinkUpdateMessage_args args) throws org.apache.thrift.TException {
        receiveLinkUpdateMessage_result result = new receiveLinkUpdateMessage_result();
        iface.receiveLinkUpdateMessage(args.src, args.dst, args.status, args.config);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("receiveLinkUpdateMessage", new receiveLinkUpdateMessage());
      return processMap;
    }

    public static class receiveLinkUpdateMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveLinkUpdateMessage_args, Void> {
      public receiveLinkUpdateMessage() {
        super("receiveLinkUpdateMessage");
      }

      public receiveLinkUpdateMessage_args getEmptyArgsInstance() {
        return new receiveLinkUpdateMessage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            receiveLinkUpdateMessage_result result = new receiveLinkUpdateMessage_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiveLinkUpdateMessage_result result = new receiveLinkUpdateMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveLinkUpdateMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.receiveLinkUpdateMessage(args.src, args.dst, args.status, args.config,resultHandler);
      }
    }

  }

  public static class receiveLinkUpdateMessage_args implements org.apache.thrift.TBase<receiveLinkUpdateMessage_args, receiveLinkUpdateMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveLinkUpdateMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveLinkUpdateMessage_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DST_FIELD_DESC = new org.apache.thrift.protocol.TField("dst", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveLinkUpdateMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveLinkUpdateMessage_argsTupleSchemeFactory());
    }

    public String src; // required
    public String dst; // required
    /**
     * 
     * @see Status
     */
    public Status status; // required
    public long config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      DST((short)2, "dst"),
      /**
       * 
       * @see Status
       */
      STATUS((short)3, "status"),
      CONFIG((short)4, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // DST
            return DST;
          case 3: // STATUS
            return STATUS;
          case 4: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST, new org.apache.thrift.meta_data.FieldMetaData("dst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveLinkUpdateMessage_args.class, metaDataMap);
    }

    public receiveLinkUpdateMessage_args() {
    }

    public receiveLinkUpdateMessage_args(
      String src,
      String dst,
      Status status,
      long config)
    {
      this();
      this.src = src;
      this.dst = dst;
      this.status = status;
      this.config = config;
      setConfigIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveLinkUpdateMessage_args(receiveLinkUpdateMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = other.src;
      }
      if (other.isSetDst()) {
        this.dst = other.dst;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      this.config = other.config;
    }

    public receiveLinkUpdateMessage_args deepCopy() {
      return new receiveLinkUpdateMessage_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      this.dst = null;
      this.status = null;
      setConfigIsSet(false);
      this.config = 0;
    }

    public String getSrc() {
      return this.src;
    }

    public receiveLinkUpdateMessage_args setSrc(String src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public String getDst() {
      return this.dst;
    }

    public receiveLinkUpdateMessage_args setDst(String dst) {
      this.dst = dst;
      return this;
    }

    public void unsetDst() {
      this.dst = null;
    }

    /** Returns true if field dst is set (has been assigned a value) and false otherwise */
    public boolean isSetDst() {
      return this.dst != null;
    }

    public void setDstIsSet(boolean value) {
      if (!value) {
        this.dst = null;
      }
    }

    /**
     * 
     * @see Status
     */
    public Status getStatus() {
      return this.status;
    }

    /**
     * 
     * @see Status
     */
    public receiveLinkUpdateMessage_args setStatus(Status status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public long getConfig() {
      return this.config;
    }

    public receiveLinkUpdateMessage_args setConfig(long config) {
      this.config = config;
      setConfigIsSet(true);
      return this;
    }

    public void unsetConfig() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIG_ISSET_ID);
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIG_ISSET_ID);
    }

    public void setConfigIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((String)value);
        }
        break;

      case DST:
        if (value == null) {
          unsetDst();
        } else {
          setDst((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Status)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case DST:
        return getDst();

      case STATUS:
        return getStatus();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case DST:
        return isSetDst();
      case STATUS:
        return isSetStatus();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveLinkUpdateMessage_args)
        return this.equals((receiveLinkUpdateMessage_args)that);
      return false;
    }

    public boolean equals(receiveLinkUpdateMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_dst = true && this.isSetDst();
      boolean that_present_dst = true && that.isSetDst();
      if (this_present_dst || that_present_dst) {
        if (!(this_present_dst && that_present_dst))
          return false;
        if (!this.dst.equals(that.dst))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_config = true;
      boolean that_present_config = true;
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (this.config != that.config)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_dst = true && (isSetDst());
      list.add(present_dst);
      if (present_dst)
        list.add(dst);

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status.getValue());

      boolean present_config = true;
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(receiveLinkUpdateMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDst()).compareTo(other.isSetDst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dst, other.dst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveLinkUpdateMessage_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dst:");
      if (this.dst == null) {
        sb.append("null");
      } else {
        sb.append(this.dst);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      sb.append(this.config);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveLinkUpdateMessage_argsStandardSchemeFactory implements SchemeFactory {
      public receiveLinkUpdateMessage_argsStandardScheme getScheme() {
        return new receiveLinkUpdateMessage_argsStandardScheme();
      }
    }

    private static class receiveLinkUpdateMessage_argsStandardScheme extends StandardScheme<receiveLinkUpdateMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveLinkUpdateMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.src = iprot.readString();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dst = iprot.readString();
                struct.setDstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.vrg.thrift.Status.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.config = iprot.readI64();
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveLinkUpdateMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          oprot.writeString(struct.src);
          oprot.writeFieldEnd();
        }
        if (struct.dst != null) {
          oprot.writeFieldBegin(DST_FIELD_DESC);
          oprot.writeString(struct.dst);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONFIG_FIELD_DESC);
        oprot.writeI64(struct.config);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveLinkUpdateMessage_argsTupleSchemeFactory implements SchemeFactory {
      public receiveLinkUpdateMessage_argsTupleScheme getScheme() {
        return new receiveLinkUpdateMessage_argsTupleScheme();
      }
    }

    private static class receiveLinkUpdateMessage_argsTupleScheme extends TupleScheme<receiveLinkUpdateMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveLinkUpdateMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetDst()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        if (struct.isSetConfig()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSrc()) {
          oprot.writeString(struct.src);
        }
        if (struct.isSetDst()) {
          oprot.writeString(struct.dst);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
        if (struct.isSetConfig()) {
          oprot.writeI64(struct.config);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveLinkUpdateMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.src = iprot.readString();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dst = iprot.readString();
          struct.setDstIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = com.vrg.thrift.Status.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.config = iprot.readI64();
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class receiveLinkUpdateMessage_result implements org.apache.thrift.TBase<receiveLinkUpdateMessage_result, receiveLinkUpdateMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveLinkUpdateMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveLinkUpdateMessage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveLinkUpdateMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveLinkUpdateMessage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveLinkUpdateMessage_result.class, metaDataMap);
    }

    public receiveLinkUpdateMessage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveLinkUpdateMessage_result(receiveLinkUpdateMessage_result other) {
    }

    public receiveLinkUpdateMessage_result deepCopy() {
      return new receiveLinkUpdateMessage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveLinkUpdateMessage_result)
        return this.equals((receiveLinkUpdateMessage_result)that);
      return false;
    }

    public boolean equals(receiveLinkUpdateMessage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(receiveLinkUpdateMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveLinkUpdateMessage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveLinkUpdateMessage_resultStandardSchemeFactory implements SchemeFactory {
      public receiveLinkUpdateMessage_resultStandardScheme getScheme() {
        return new receiveLinkUpdateMessage_resultStandardScheme();
      }
    }

    private static class receiveLinkUpdateMessage_resultStandardScheme extends StandardScheme<receiveLinkUpdateMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveLinkUpdateMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveLinkUpdateMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveLinkUpdateMessage_resultTupleSchemeFactory implements SchemeFactory {
      public receiveLinkUpdateMessage_resultTupleScheme getScheme() {
        return new receiveLinkUpdateMessage_resultTupleScheme();
      }
    }

    private static class receiveLinkUpdateMessage_resultTupleScheme extends TupleScheme<receiveLinkUpdateMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveLinkUpdateMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveLinkUpdateMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
